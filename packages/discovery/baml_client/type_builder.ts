/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    ComponentDescription: ClassViewer<'ComponentDescription', "description" | "primary_purpose" | "key_features" | "use_cases">;
    
    DialogueQuestion: ClassViewer<'DialogueQuestion', "question" | "type" | "options" | "follow_up">;
    
    DialogueQuestions: ClassViewer<'DialogueQuestions', "questions" | "reasoning">;
    
    PatternAnalysis: ClassViewer<'PatternAnalysis', "design_patterns" | "architectural_patterns" | "quality_indicators" | "integration_patterns" | "customization_opportunities" | "recommendations">;
    
    QualityAssessment: ClassViewer<'QualityAssessment', "code_quality_score" | "reliability_score" | "reusability_score" | "documentation_score" | "testing_score" | "overall_score" | "strengths" | "weaknesses" | "recommendations">;
    
    RefinedQuery: ClassViewer<'RefinedQuery', "refined_query" | "key_terms" | "filters" | "boost_factors" | "alternative_queries" | "confidence_score">;
    
    TransformationSuggestion: ClassViewer<'TransformationSuggestion', "type" | "description" | "code_example" | "priority">;
    
    TransformationSuggestions: ClassViewer<'TransformationSuggestions', "structural_changes" | "pattern_adaptations" | "framework_modifications" | "configuration_updates" | "integration_points" | "summary">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "ComponentDescription","DialogueQuestion","DialogueQuestions","PatternAnalysis","QualityAssessment","RefinedQuery","TransformationSuggestion","TransformationSuggestions",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.ComponentDescription = this.tb.classViewer("ComponentDescription", [
          "description","primary_purpose","key_features","use_cases",
        ]);
        
        this.DialogueQuestion = this.tb.classViewer("DialogueQuestion", [
          "question","type","options","follow_up",
        ]);
        
        this.DialogueQuestions = this.tb.classViewer("DialogueQuestions", [
          "questions","reasoning",
        ]);
        
        this.PatternAnalysis = this.tb.classViewer("PatternAnalysis", [
          "design_patterns","architectural_patterns","quality_indicators","integration_patterns","customization_opportunities","recommendations",
        ]);
        
        this.QualityAssessment = this.tb.classViewer("QualityAssessment", [
          "code_quality_score","reliability_score","reusability_score","documentation_score","testing_score","overall_score","strengths","weaknesses","recommendations",
        ]);
        
        this.RefinedQuery = this.tb.classViewer("RefinedQuery", [
          "refined_query","key_terms","filters","boost_factors","alternative_queries","confidence_score",
        ]);
        
        this.TransformationSuggestion = this.tb.classViewer("TransformationSuggestion", [
          "type","description","code_example","priority",
        ]);
        
        this.TransformationSuggestions = this.tb.classViewer("TransformationSuggestions", [
          "structural_changes","pattern_adaptations","framework_modifications","configuration_updates","integration_points","summary",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}