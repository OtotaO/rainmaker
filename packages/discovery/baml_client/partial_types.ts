/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  ComponentDescription,  DialogueQuestion,  DialogueQuestions,  PatternAnalysis,  QualityAssessment,  RefinedQuery,  TransformationSuggestion,  TransformationSuggestions } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface ComponentDescription {
      description?: string | null
      primary_purpose?: string | null
      key_features: string[]
      use_cases: string[]
    }
    export interface DialogueQuestion {
      question?: string | null
      type?: string | null
      options: string[]
      follow_up?: string | null
    }
    export interface DialogueQuestions {
      questions: DialogueQuestion[]
      reasoning?: string | null
    }
    export interface PatternAnalysis {
      design_patterns: string[]
      architectural_patterns: string[]
      quality_indicators: string[]
      integration_patterns: string[]
      customization_opportunities: string[]
      recommendations: string[]
    }
    export interface QualityAssessment {
      code_quality_score?: number | null
      reliability_score?: number | null
      reusability_score?: number | null
      documentation_score?: number | null
      testing_score?: number | null
      overall_score?: number | null
      strengths: string[]
      weaknesses: string[]
      recommendations: string[]
    }
    export interface RefinedQuery {
      refined_query?: string | null
      key_terms: string[]
      filters: Record<string, string>
      boost_factors: Record<string, number>
      alternative_queries: string[]
      confidence_score?: number | null
    }
    export interface TransformationSuggestion {
      type?: string | null
      description?: string | null
      code_example?: string | null
      priority?: string | null
    }
    export interface TransformationSuggestions {
      structural_changes: TransformationSuggestion[]
      pattern_adaptations: TransformationSuggestion[]
      framework_modifications: TransformationSuggestion[]
      configuration_updates: TransformationSuggestion[]
      integration_points: TransformationSuggestion[]
      summary?: string | null
    }
}