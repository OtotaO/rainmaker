/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "clients.baml": "// Client configurations for LLM providers\n\nclient<llm> GPT4 {\n  provider openai\n  options {\n    model \"gpt-4\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 2000\n    temperature 0.1\n  }\n}\n\nclient<llm> GPT35 {\n  provider openai\n  options {\n    model \"gpt-3.5-turbo\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 1500\n    temperature 0.1\n  }\n}\n\nclient<llm> Claude {\n  provider anthropic\n  options {\n    model \"claude-3-sonnet-20240229\"\n    api_key env.ANTHROPIC_API_KEY\n    max_tokens 2000\n    temperature 0.1\n  }\n}\n",
  "main.baml": "// Main BAML configuration for Rainmaker Discovery\n// This defines the core LLM functions for component analysis and dialogue\n\n// Component description generation\nfunction GenerateComponentDescription(\n  name: string,\n  language: string,\n  framework: string?,\n  patterns: string[],\n  dependencies: string[],\n  apis: string[],\n  code_snippet: string\n) -> ComponentDescription {\n  client GPT4\n  prompt #\"\n    You are an expert software engineer analyzing a code component.\n    \n    Component Details:\n    - Name: {{name}}\n    - Language: {{language}}\n    {% if framework %}- Framework: {{framework}}{% endif %}\n    - Patterns: {{patterns}}\n    - Dependencies: {{dependencies}}\n    - APIs: {{apis}}\n    \n    Code Snippet:\n    ```{{language}}\n    {{code_snippet}}\n    ```\n    \n    Generate a clear, concise description of what this component does and its primary purpose.\n    Focus on functionality, not implementation details.\n  \"#\n}\n\n// Intelligent pattern recognition\nfunction AnalyzeCodePatterns(\n  code: string,\n  language: string,\n  framework: string?\n) -> PatternAnalysis {\n  client GPT4\n  prompt #\"\n    You are an expert code analyst. Analyze the following {{language}} code and identify:\n    \n    1. Design patterns used (e.g., singleton, factory, observer)\n    2. Architectural patterns (e.g., MVC, MVP, component-based)\n    3. Code quality indicators (error handling, testing, documentation)\n    4. Integration patterns (API calls, database access, authentication)\n    5. Customization opportunities (configuration points, extension hooks)\n    \n    {% if framework %}This code uses the {{framework}} framework.{% endif %}\n    \n    Code to analyze:\n    ```{{language}}\n    {{code}}\n    ```\n    \n    Provide specific, actionable insights about the code's structure and patterns.\n  \"#\n}\n\n// Component quality assessment\nfunction AssessComponentQuality(\n  name: string,\n  code: string,\n  has_tests: bool,\n  has_documentation: bool,\n  dependencies: string[],\n  github_stars: int?\n) -> QualityAssessment {\n  client GPT4\n  prompt #\"\n    You are a senior software engineer evaluating component quality.\n    \n    Component: {{name}}\n    Has Tests: {{has_tests}}\n    Has Documentation: {{has_documentation}}\n    Dependencies: {{dependencies}}\n    {% if github_stars %}GitHub Stars: {{github_stars}}{% endif %}\n    \n    Code:\n    ```\n    {{code}}\n    ```\n    \n    Assess this component's quality across these dimensions:\n    1. Code Quality (readability, maintainability, best practices)\n    2. Reliability (error handling, edge cases, robustness)\n    3. Reusability (modularity, configurability, adaptability)\n    4. Documentation (clarity, completeness, examples)\n    5. Testing (coverage, quality, types of tests)\n    \n    Provide a score (1-10) for each dimension and overall recommendations.\n  \"#\n}\n\n// Adaptive dialogue generation\nfunction GenerateDialogueQuestions(\n  user_query: string,\n  category: string,\n  previous_responses: string[],\n  context: string\n) -> DialogueQuestions {\n  client GPT4\n  prompt #\"\n    You are an expert product manager helping users refine their requirements.\n    \n    User's Original Query: \"{{user_query}}\"\n    Category: {{category}}\n    Context: {{context}}\n    \n    {% if previous_responses %}\n    Previous Responses:\n    {% for response in previous_responses %}\n    - {{response}}\n    {% endfor %}\n    {% endif %}\n    \n    Generate 3-5 intelligent follow-up questions that will help narrow down the user's needs.\n    Focus on:\n    1. Technical requirements (performance, scalability, security)\n    2. Integration needs (existing systems, APIs, databases)\n    3. User experience preferences (UI/UX, accessibility, mobile)\n    4. Constraints (budget, timeline, team expertise)\n    \n    Make questions specific and actionable, not generic.\n    Each question should have 3-4 multiple choice options.\n  \"#\n}\n\n// Code transformation suggestions\nfunction SuggestCodeTransformations(\n  source_code: string,\n  target_patterns: string[],\n  target_framework: string?,\n  constraints: string[]\n) -> TransformationSuggestions {\n  client GPT4\n  prompt #\"\n    You are an expert in code transformation and adaptation.\n    \n    Source Code:\n    ```\n    {{source_code}}\n    ```\n    \n    Target Patterns: {{target_patterns}}\n    {% if target_framework %}Target Framework: {{target_framework}}{% endif %}\n    Constraints: {{constraints}}\n    \n    Suggest specific code transformations to adapt this component:\n    1. Structural changes needed\n    2. Pattern adaptations required\n    3. Framework-specific modifications\n    4. Configuration updates\n    5. Integration points to modify\n    \n    Provide concrete, implementable suggestions with code examples.\n  \"#\n}\n\n// Enhanced search query refinement\nfunction RefineSearchQuery(\n  original_query: string,\n  dialogue_responses: string[],\n  user_context: string\n) -> RefinedQuery {\n  client GPT4\n  prompt #\"\n    You are an expert at understanding developer intent and translating requirements into precise search queries.\n    \n    Original Query: \"{{original_query}}\"\n    User Context: {{user_context}}\n    \n    Dialogue Responses:\n    {% for response in dialogue_responses %}\n    - {{response}}\n    {% endfor %}\n    \n    Based on this information, generate:\n    1. A refined, specific search query\n    2. Key technical terms to emphasize\n    3. Filters to apply (language, framework, patterns)\n    4. Boost factors for ranking\n    5. Alternative query variations\n    \n    Focus on capturing the user's true intent, not just their literal words.\n  \"#\n}\n",
  "types.baml": "// Type definitions for BAML functions\n\nclass ComponentDescription {\n  description string\n  primary_purpose string\n  key_features string[]\n  use_cases string[]\n}\n\nclass PatternAnalysis {\n  design_patterns string[]\n  architectural_patterns string[]\n  quality_indicators string[]\n  integration_patterns string[]\n  customization_opportunities string[]\n  recommendations string[]\n}\n\nclass QualityAssessment {\n  code_quality_score int\n  reliability_score int\n  reusability_score int\n  documentation_score int\n  testing_score int\n  overall_score int\n  strengths string[]\n  weaknesses string[]\n  recommendations string[]\n}\n\nclass DialogueQuestion {\n  question string\n  type string // \"single-choice\" | \"multi-choice\" | \"text\"\n  options string[]\n  follow_up string?\n}\n\nclass DialogueQuestions {\n  questions DialogueQuestion[]\n  reasoning string\n}\n\nclass TransformationSuggestion {\n  type string\n  description string\n  code_example string?\n  priority string // \"high\" | \"medium\" | \"low\"\n}\n\nclass TransformationSuggestions {\n  structural_changes TransformationSuggestion[]\n  pattern_adaptations TransformationSuggestion[]\n  framework_modifications TransformationSuggestion[]\n  configuration_updates TransformationSuggestion[]\n  integration_points TransformationSuggestion[]\n  summary string\n}\n\nclass RefinedQuery {\n  refined_query string\n  key_terms string[]\n  filters map<string, string>\n  boost_factors map<string, float>\n  alternative_queries string[]\n  confidence_score float\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}