/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface ComponentDescription {
  description: string
  primary_purpose: string
  key_features: string[]
  use_cases: string[]
  
}

export interface DialogueQuestion {
  question: string
  type: string
  options: string[]
  follow_up?: string | null
  
}

export interface DialogueQuestions {
  questions: DialogueQuestion[]
  reasoning: string
  
}

export interface PatternAnalysis {
  design_patterns: string[]
  architectural_patterns: string[]
  quality_indicators: string[]
  integration_patterns: string[]
  customization_opportunities: string[]
  recommendations: string[]
  
}

export interface QualityAssessment {
  code_quality_score: number
  reliability_score: number
  reusability_score: number
  documentation_score: number
  testing_score: number
  overall_score: number
  strengths: string[]
  weaknesses: string[]
  recommendations: string[]
  
}

export interface RefinedQuery {
  refined_query: string
  key_terms: string[]
  filters: Record<string, string>
  boost_factors: Record<string, number>
  alternative_queries: string[]
  confidence_score: number
  
}

export interface TransformationSuggestion {
  type: string
  description: string
  code_example?: string | null
  priority: string
  
}

export interface TransformationSuggestions {
  structural_changes: TransformationSuggestion[]
  pattern_adaptations: TransformationSuggestion[]
  framework_modifications: TransformationSuggestion[]
  configuration_updates: TransformationSuggestion[]
  integration_points: TransformationSuggestion[]
  summary: string
  
}
