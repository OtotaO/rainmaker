import { z } from 'zod';

/**
 * Schema for the output of the BAML GenerateDialogueQuestions function.
 * This defines the structure of questions generated by the LLM.
 */
export const BamlDialogueQuestionSchema = z.object({
  question: z.string().describe('The question generated by the LLM'),
  type: z.union([
    z.literal('single-choice'),
    z.literal('multi-choice'),
    z.literal('text'),
    z.literal('confirm')
  ]).describe('The type of question'),
  options: z.array(z.string()).optional().describe('Options for single-choice or multi-choice questions'),
  follow_up: z.string().optional().describe('ID of the next question node, if applicable'),
});

export const BamlGenerateDialogueQuestionsOutputSchema = z.object({
  questions: z.array(BamlDialogueQuestionSchema).describe('Array of generated dialogue questions'),
});

export type BamlGenerateDialogueQuestionsOutput = z.infer<typeof BamlGenerateDialogueQuestionsOutputSchema>;
export type BamlDialogueQuestion = z.infer<typeof BamlDialogueQuestionSchema>;

/**
 * Type for the BAML client.
 *
 * @remarks
 * This type is defined using a standard TypeScript interface instead of Zod
 * because Zod's custom JSON-safe implementation explicitly forbids `z.function`.
 * The BAML client represents an interface with methods (functions), not a
 * JSON-serializable data structure, making a direct Zod schema definition
 * unsuitable here.
 */
export interface BAMLClient {
  GenerateDialogueQuestions: (
    query: string,
    category: string,
    responseHistory: string[],
    contextStr: string
  ) => Promise<BamlGenerateDialogueQuestionsOutput>;
}

/**
 * Base schema for LLM-generated transformation suggestions.
 */
const BamlBaseSuggestionSchema = z.object({
  priority: z.string().describe('Priority of the suggestion (e.g., "high", "medium", "low")'), // Broadened to string
  description: z.string().describe('Description of the suggestion'),
  code_example: z.string().nullable().optional().describe('Optional code example for the suggestion'), // Made nullable
});

/**
 * Schema for structural changes suggested by LLM.
 */
export const BamlStructuralChangeSchema = BamlBaseSuggestionSchema.extend({
  type: z.string().describe('Type of structural change (e.g., "refactor", "add-file")'), // Broadened to string
});

/**
 * Schema for pattern adaptations suggested by LLM.
 */
export const BamlPatternAdaptationSchema = BamlBaseSuggestionSchema.extend({
  // No additional fields, but could be extended later
});

/**
 * Schema for framework modifications suggested by LLM.
 */
export const BamlFrameworkModificationSchema = BamlBaseSuggestionSchema.extend({
  type: z.union([z.literal('import-change'), z.literal('api-update'), z.string()]).describe('Type of framework modification'), // Broadened to include string
});

/**
 * Schema for configuration updates suggested by LLM.
 */
export const BamlConfigurationUpdateSchema = BamlBaseSuggestionSchema.extend({
  // No additional fields, but could be extended later
});

/**
 * Schema for integration points suggested by LLM.
 */
export const BamlIntegrationPointSchema = BamlBaseSuggestionSchema.extend({
  // No additional fields, but could be extended later
});

/**
 * Schema for the output of the BAML SuggestCodeTransformations function.
 * This defines the structure of transformation suggestions generated by the LLM.
 */
export const BamlSuggestCodeTransformationsOutputSchema = z.object({
  structural_changes: z.array(BamlStructuralChangeSchema).describe('Suggested structural code changes'),
  pattern_adaptations: z.array(BamlPatternAdaptationSchema).describe('Suggested pattern adaptations'),
  framework_modifications: z.array(BamlFrameworkModificationSchema).describe('Suggested framework-specific modifications'),
  configuration_updates: z.array(BamlConfigurationUpdateSchema).describe('Suggested configuration updates'),
  integration_points: z.array(BamlIntegrationPointSchema).describe('Suggested integration points (e.g., new files)'),
});

export type BamlSuggestCodeTransformationsOutput = z.infer<typeof BamlSuggestCodeTransformationsOutputSchema>;

/**
 * Placeholder for the BAML client's SuggestCodeTransformations method.
 * This is part of the BAMLClient interface.
 */
export interface BAMLAdaptationClientMethods {
  SuggestCodeTransformations: (
    code: string,
    targetPatterns: string[],
    framework: string | undefined,
    constraints: string[]
  ) => Promise<BamlSuggestCodeTransformationsOutput>;
}

// Augment the main BAMLClient interface to include new methods
declare module './baml' {
  interface BAMLClient extends BAMLAdaptationClientMethods {}
}
